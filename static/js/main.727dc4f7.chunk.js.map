{"version":3,"sources":["components/Form/ContactForm/ContactForm.js","components/Form/Filter/Filter.js","components/Form/ContactList/ContactList.js","App.js","index.js"],"names":["initialState","name","number","ContactForm","state","nameInputId","shortid","generate","numberInputId","findInput","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","className","this","htmlFor","type","pattern","title","required","onChange","id","Component","Filter","onChangeFilter","target","ContactList","contacts","onDeleteContact","map","onClick","App","initialContacts","filter","addContact","contact","includes","alert","length","prevState","deleteContact","changeFilter","getVisibleContacts","toLowerCase","removeContact","contactId","localStorage","getItem","parseContacts","JSON","parse","prevProps","setItem","stringify","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.727dc4f7.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport shortid from 'shortid';\r\nimport './ContactForm.css';\r\n\r\nconst initialState = {\r\n    name: '',\r\n    number: ''\r\n}\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        ...initialState\r\n    }\r\n\r\n    nameInputId = shortid.generate();\r\n    numberInputId = shortid.generate();\r\n    findInput = shortid.generate();\r\n\r\n    handleChange = e => {\r\n        const { name, value } = e.currentTarget;\r\n        this.setState({ [name]: value });\r\n\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onSubmit({ ...this.state })\r\n        this.reset()\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState({ ...initialState })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <form className=\"TaskEditor\" onSubmit={this.handleSubmit}>\r\n                    <label className=\"TaskEditor_label\" htmlFor={this.nameInputId}>Name</label>\r\n                    <br />\r\n                    <input\r\n                        className=\"TaskEditor_input\"\r\n                        type=\"text\"\r\n                        value={this.state.name}\r\n                        name=\"name\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                        onChange={this.handleChange}\r\n                        id={this.nameInputId}\r\n                    />\r\n                    <br />\r\n                    <label className=\"TaskEditor_label\" htmlFor={this.numberInputId}>Number</label>\r\n                    <br />\r\n                    <input\r\n                        className=\"TaskEditor_input\"\r\n                        type=\"text\"\r\n                        value={this.state.number}\r\n                        name=\"number\"\r\n                        pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                        title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                        required\r\n                        onChange={this.handleChange}\r\n                        id={this.numberInputId}\r\n                    />\r\n                    <br />\r\n                    <button className=\"TaskEditor_button\" type=\"submit\">Add contact</button>\r\n                </form>\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;","import PropTypes from \"prop-types\";\r\nimport './Filter.css'\r\n\r\nconst Filter = ({ value, onChangeFilter }) => {\r\n    return (\r\n        <div>\r\n            <p className=\"Filter_text\">Find contacts by name</p>\r\n            <br />\r\n            <input\r\n                className=\"Filter_input\"\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={(e) => onChangeFilter(e.target.value)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import PropTypes from \"prop-types\";\r\nimport './ContactList.css'\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n    <ul className=\"TaskList\"> {contacts.map(({ id, name, number }) => (\r\n        <li className=\"TaskList_item\" key={id}>\r\n            <p className=\"TaskList_text\">{name}: {number}</p>\r\n            <button\r\n                className=\"TaskList_button\"\r\n                type=\"button\"\r\n                onClick={() => onDeleteContact(id)}\r\n            >Delete</button>\r\n        </li>\r\n    ))}\r\n    </ul>\r\n)\r\n\r\nContactList.propTypes = {\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n    contacts: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n    })),\r\n}\r\n\r\nexport default ContactList;","import React, { Component } from 'react';\r\nimport shortid from 'shortid';\r\nimport ContactForm from './components/Form/ContactForm/ContactForm';\r\nimport Filter from './components/Form/Filter/Filter';\r\nimport ContactList from './components/Form/ContactList/ContactList';\r\nimport initialContacts from './contacts.json';\r\nimport './App.css'\r\n// import PropTypes from 'prop-types';\r\n\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: initialContacts,\r\n    filter: '',\r\n  }\r\n\r\n  componentDidMount() {\r\n    const contacts = localStorage.getItem('contacts')\r\n    const parseContacts = JSON.parse(contacts)\r\n    if (parseContacts) {\r\n      this.setState({ contacts: parseContacts })\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.contacts !== prevState.contacts) {\r\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\r\n    }\r\n  }\r\n\r\n  addContact = (contacts) => {\r\n    // console.log(contact)\r\n    const contact = {\r\n      ...contacts,\r\n      id: shortid.generate()\r\n    }\r\n    const searchSameName = this.state.contacts\r\n      .map((contact) => contact.name)\r\n      .includes(contact.name);\r\n\r\n    if (searchSameName) {\r\n      alert(`${contact.name} is already in contacts`);\r\n    } else if (contact.name.length === 0) {\r\n      alert(\"Fields must be filled!\");\r\n    } else {\r\n      this.setState((prevState) => ({\r\n        contacts: [...prevState.contacts, contact],\r\n      }));\r\n    }\r\n  }\r\n\r\n  deleteContact = id => {\r\n    this.setState(prevState => ({\r\n      contacts: prevState.contacts.filter(contact => contact.id !== id)\r\n    }))\r\n  }\r\n\r\n  changeFilter = (filter) => {\r\n    this.setState({ filter });\r\n  };\r\n\r\n  getVisibleContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n\r\n    return contacts.filter((contacts) =>\r\n      contacts.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  };\r\n\r\n  removeContact = (contactId) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { filter } = this.state;\r\n\r\n    const visibleContacts = this.getVisibleContacts();\r\n\r\n    return (\r\n      <>\r\n        <h1 className=\"Title\">Phonebook</h1>\r\n        <ContactForm\r\n          onSubmit={this.addContact}\r\n        />\r\n        <h2 className=\"Title\">Contacts</h2>\r\n        <Filter\r\n          value={filter}\r\n          onChangeFilter={this.changeFilter} />\r\n        <ContactList\r\n          contacts={visibleContacts}\r\n          onDeleteContact={this.deleteContact}\r\n        />\r\n      </>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\n\n"],"sourceRoot":""}